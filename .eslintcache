[{"/home/avinash/Desktop/cardplay/src/index.js":"1","/home/avinash/Desktop/cardplay/src/App.js":"2","/home/avinash/Desktop/cardplay/src/reportWebVitals.js":"3","/home/avinash/Desktop/cardplay/src/components/ticket.js":"4","/home/avinash/Desktop/cardplay/src/components/main.js":"5","/home/avinash/Desktop/cardplay/src/components/PlayCard.js":"6","/home/avinash/Desktop/cardplay/src/firebase.js":"7","/home/avinash/Desktop/cardplay/src/components/VerifyCard.js":"8"},{"size":629,"mtime":1668770896229,"results":"9","hashOfConfig":"10"},{"size":602,"mtime":1668775107488,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1647504637954,"results":"12","hashOfConfig":"10"},{"size":4415,"mtime":1668775344056,"results":"13","hashOfConfig":"10"},{"size":5130,"mtime":1669094342866,"results":"14","hashOfConfig":"10"},{"size":7734,"mtime":1669373656818,"results":"15","hashOfConfig":"10"},{"size":543,"mtime":1667980090893,"results":"16","hashOfConfig":"10"},{"size":3671,"mtime":1669052200216,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jm6m6n",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/home/avinash/Desktop/cardplay/src/index.js",[],["39","40"],"/home/avinash/Desktop/cardplay/src/App.js",[],"/home/avinash/Desktop/cardplay/src/reportWebVitals.js",[],"/home/avinash/Desktop/cardplay/src/components/ticket.js",["41","42"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport tamblo from \"tambola-generator\"\nimport { useHistory } from 'react-router-dom';\nimport { collection, updateDoc, doc } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\n\nconst constSets = [1, 2, 3, 4, 5, 6];\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\n\nfunction Ticket() {\n    const [list, setList] = useState([]);\n    const [player, setPlayers] = useState(0);\n    const [sets, setSets] = useState(1);\n    const [password, setPassword] = useState(\"\")\n    const [openField, setOpenField] = useState(false)\n\n\n    const history = useHistory()\n\n    const updateTickets = async () => {\n        if (password === \"admin123\") {\n            const ticketDoc = doc(fireStore, \"tickets\", \"tickets\")\n            let data = {\n                list: JSON.stringify(list),\n                players: parseInt(player),\n                sets: sets\n            }\n            await updateDoc(ticketDoc, data)\n            alert(\"tickets uploaded successfully\")\n            setOpenField(false)\n        } else {\n            alert(\"password mismatch\")\n        }\n    }\n    const handelSubmit = () => {\n        let tickets = tamblo.generateTickets(parseInt(player * sets))\n        setList(tickets)\n    }\n\n    const Card = () => {\n        const func = (card, index) => {\n            let myID = Math.floor(index / sets) + 1\n            let color = colors[index % sets]\n            return <><div className=\"mb-4\">\n                <div id={`${myID}_${color}`} style={{ marginLeft: \"20px\", padding: \"30px\", background: \"#fff\" }} className=\"border border-success\" >\n                    <span>{color}</span>\n                    {card._entries.map(row =>\n                        <div class=\"row \">\n                            {row.map(col => <div class=\"col border border-dark\" style={{ width: \"40px\", height: \"40px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", fontSize: \"20px\", background: col ? \"#fff\" : color }}>{col || \" \"}</div>)}\n                        </div>)\n                    }\n                    <span> ticket : {`${myID}_${color}`}</span>\n                </div>\n            </div>\n            </>\n        }\n        return func;\n    }\n\n    const tempCard = Card();\n\n    return (\n        <>\n            {!list.length ?\n                <div className=\"row\" style={{ height: \"100vh\", background: \"#cccbab\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n                    <div>\n                        <Button onClick={() => history.push(\"/\")} size=\"sm\" variant=\"success\" className=\"mb-2\">Home</Button>\n                        <div>\n                            <input style={{ padding: \"10px\" }} placeholder=\"enter number of players\" onChange={(e) => setPlayers(e.target.value)} type=\"number\" />\n                        </div>\n                        <div className=\"mt-2\">\n                            <label className=\"mr-3\">select number of sets : </label>\n                            <select onChange={(e) => setSets(parseInt(e.target.value))} className=\"px-2 py-1\">\n                                {constSets.map(set => <option value={set} >{set}</option>)}\n                            </select>\n                        </div>\n                        <div className=\"mt-5\">\n                            <Button onClick={handelSubmit} variant=\"success\">Generate Tickets</Button>\n                        </div>\n                    </div>\n                </div> :\n                <div style={{ background: \"#cccbab\" }} className=\"mb-5\">\n                    <Button onClick={() => history.push(\"/\")} size=\"sm\" variant=\"success\" className=\"mb-2\">Home</Button>\n                    <Button onClick={() => setOpenField(v => !v)} size=\"sm\" variant=\"warning\" className=\"ml-2 mb-2\">Upload Ticket</Button>\n                    {openField && <div>\n                        <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} />\n                        <Button onClick={updateTickets} size=\"sm\" variant=\"primary\" className=\"ml-2 mb-2\">Submit</Button>\n                    </div>}\n                    <div className=\"row\" >\n                        {list.map((ticket, index) => tempCard(ticket, index))}\n                    </div>\n                </div>\n            }\n        </>\n    );\n}\n\nexport default React.memo(Ticket);\n\n","/home/avinash/Desktop/cardplay/src/components/main.js",["43","44","45"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Spinner, FormCheck } from \"react-bootstrap\";\nimport { useHistory } from 'react-router-dom';\nimport sound from \"../assets/spin.mp3\"\nimport VerifyCard from \"./VerifyCard\";\nconst wins = [\n  \"Early 5\",\n  \"Top Line\",\n  \"Middle Line\",\n  \"Bottom Line\",\n  \"Four Corners\",\n  \"Full House 1\",\n  \" Full House 2\"\n]\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [isWating, setIsWating] = useState(false);\n  const [spinner, setSpiner] = useState(1);\n  const [audio, setAudio] = useState(new Audio(sound));\n  const history = useHistory();\n  const [openDialog, setOpenDialog] = useState(false)\n\n  const onOpenDialog = () => setOpenDialog(true)\n\n\n  useEffect(() => {\n    if (list.length) localStorage.setItem(\"numbers\", JSON.stringify(list))\n  }, [list])\n\n  useEffect(() => {\n    let stoaredList = JSON.parse(localStorage.getItem(\"numbers\"))\n    if (stoaredList) setList(stoaredList)\n  }, [])\n\n  const handleOnReset = () => {\n    setList([])\n    localStorage.removeItem(\"numbers\")\n  }\n\n  const handleOnClick = () => {\n    if (list.length < 90) {\n      let intervalId = setInterval(() => {\n        let number = Math.floor(Math.random() * (91 - 1) + 1)\n        setSpiner(number)\n      }, 50)\n      let flag = true;\n      while (flag) {\n        let number = Math.floor(Math.random() * (91 - 1) + 1)\n        if (!list.includes(number)) {\n          setIsWating(true)\n          // audio.play()\n          flag = false\n          setTimeout(() => {\n            clearInterval(intervalId)\n            setList([...list, number])\n            setIsWating(false)\n            // audio.remove()\n          }, 2000)\n        }\n      }\n    }\n  }\n\n  const Board = () => {\n    let tempList = []\n    let row = []\n    for (let i = 1; i <= 90; i++) {\n\n      row.push(<div\n        className={`col  ${list.includes(i) ? \"border-danger\" : \"\"} rounded-pill mx-2 my-2`}\n        style={{ backgroundColor: list.includes(i) ? \"#d5e4f3\" : \"\" }}>\n        <span style={{ fontSize: \"25px\", color: !list.includes(i) ? \"#6c757d\" : \"\", fontWeight: !list.includes(i) ? \"100\" : \"bold\" }}><b>{i}</b></span>\n      </div>)\n\n      if (i % 10 === 0) {\n        tempList.push(<div className=\"row\" style={{ margin: \"0px\", width: \"auto\", borderLeft: \"1px solid #fff\", borderRight: \"1px solid\" }}>{row}</div>)\n        row = []\n      }\n    }\n    return tempList;\n  }\n\n  return (\n    <div className=\"row\" style={{ height: \"100vh\", border: \"2px solid\" }}>\n      <div className=\"col-3 d-flex align-items-center flex-column pt-3\" style={{ backgroundColor: \"#adb5bd\" }}>\n        <div className=\"d-flex justify-content-center\">\n          <Button variant=\"info\" onClick={handleOnReset} size=\"sm\">\n            Reset\n          </Button>\n          <Button className=\"ml-3\" variant=\"secondary\" onClick={() => history.push(\"/tickets\")} size=\"sm\">\n            generate tickets\n          </Button>\n          <Button className=\"ml-3\" style={{ zIndex: 1 }} variant=\"warning\" onClick={() => history.push(\"/card\")} size=\"sm\">\n            Play Card\n          </Button>\n          <Button className=\"ml-3\" style={{ zIndex: 1 }} variant=\"danger\" onClick={onOpenDialog} size=\"sm\">\n            Verify Card\n          </Button>\n        </div>\n        <div style={{ fontSize: \"20px\" }} className=\"pt-2\">Previous</div>\n        <div style={{ width: \"100px\", height: \"100px\" }} className=\"d-flex align-items-center justify-content-center border border-secondary rounded-circle mb-1\" >\n          {list.length !== 0 &&\n            <span style={{ fontSize: \"60px\", color: \"grey\" }}>\n              {list[list.length - 2]}\n            </span>\n          }\n        </div>\n        <div style={{ width: \"200px\", height: \"200px\", background: \"#d5e4f3\" }} className=\"d-flex align-items-center justify-content-center border border-dark rounded-circle\" >\n          {isWating ?\n            <span style={{ fontSize: \"135px\", color: \"grey\" }}>\n              {spinner}\n            </span> :\n            list.length ?\n              <span style={{ fontSize: list.length != 0 ? \"135px\" : \"50px\", fontWeight: \"bold\" }}>\n                {list[list.length - 1]}\n              </span> :\n              <h2>Start With Spin &#x21e9;</h2>\n          }\n        </div>\n        <Button className=\"mt-3\" onClick={handleOnClick} disabled={isWating}>\n          {isWating ?\n            <Spinner animation=\"border\" variant=\"info\" /> :\n            <>Spin &#x27F3;</>\n          }\n        </Button>\n        <div class=\"d-flex flex-wrap mt-2 mx-4\">\n          {wins.map(label => <FormCheck style={{ width: \"120px\", textAlign: \"left\" }} className=\"p-2\" label={label} />)}\n        </div>\n      </div>\n      <div className=\"col-9 pt-2\" style={{ height: \"100%\", backgroundColor: \"#adb5bd\", borderLeft: \"1px solid\" }}>\n        <div>\n          <h1><b>Good Luck...!</b></h1>\n          <div class=\"d-flex mx-5 mb-5 bg-dark\" style={{ borderColor: \"#adb5bd\", border: \"5px solid #d5e4f3\" }}>\n            <Board />\n          </div>\n        </div>\n      </div>\n      <VerifyCard openDialog={openDialog} setOpenDialog={setOpenDialog} list={list}/>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","/home/avinash/Desktop/cardplay/src/components/PlayCard.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63"],"import React, { useEffect, useState } from \"react\";\nimport { collection, getDocs } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\nimport { Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\"\nimport claps from \"../assets/clap.mp3\"\nimport img from \"../assets/clapman.gif\"\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\nlet rows = [\"top\", \"middle\", \"bottom\"]\nconst init = { all: 0, top: 0, bottom: 0, middle: 0, corner: 0 }\n\nfunction PlayCard() {\n    const [list, setList] = useState([]);\n    const [sets, setSets] = useState(1);\n    const [id, setId] = useState(\"\")\n    const { ticketId } = useParams()\n    let tempId = \"\"\n    const [audio, setAudio] = useState(new Audio(claps));\n    const [players, setPlayers] = useState(0);\n    const [selectedCard, setSelectedCard] = useState([])\n    const [corners, setCorners] = useState([])\n    const ticketCollectionRef = collection(fireStore, \"tickets\")\n    const [showGIF, setShowGIF] = useState(null)\n\n    const [myCard, setMyCard] = useState([...Array(3)].map(e => Array(9).fill(null)))\n    const [myCount, setMyCount] = useState([])\n\n    useEffect(() => {\n        const getTickets = async () => {\n            let data = await getDocs(ticketCollectionRef)\n            data = data.docs[0].data()\n            setList(JSON.parse(data.list))\n            setSets(data.sets)\n            setPlayers(data.players)\n        }\n        getTickets()\n    }, [])\n\n    useEffect(() => {\n        if (ticketId) {\n            setId(parseInt(ticketId))\n        }\n    }, [ticketId])\n\n    useEffect(() => {\n        if (showGIF) {\n            setTimeout(() => {\n                setShowGIF(null)\n            }, 3500)\n        }\n    }, [showGIF])\n\n    const setconerValues = (ar) => {\n        let arr = []\n        ar.map(card => {\n            let temp1 = []\n            card._entries[0].map(col => {\n                if (col != 0) temp1.push(col)\n            })\n            let temp2 = []\n            card._entries[2].map(col => {\n                if (col != 0) temp2.push(col)\n            })\n            let temp = [temp1[0], temp1[4], temp2[0], temp2[4]]\n            arr.push(temp)\n        })\n        setCorners(arr)\n    }\n\n    useEffect(() => {\n        if (list.length > 0 && sets && parseInt(id) <= players && parseInt(id) > 0) {\n            setMyCount([...Array(sets)].map(e => ({ ...init })))\n            setMyCard([...Array(sets)].map(e => [...Array(3)].map(e => Array(9).fill(null))))\n            let ar = []\n            let start = (parseInt(id) - 1) * sets;\n            for (let i = start; i < parseInt(id) * sets; i++) {\n                ar.push(list[i])\n            }\n            setconerValues(ar)\n            setSelectedCard(ar)\n        }\n\n    }, [id, list, players, sets])\n\n    const onClick = (cardIndex, rowindex, colindex, col) => {\n        if (col != 0) {\n            let arr = [...myCard]\n            let count = { ...myCount }\n            if (arr[cardIndex][rowindex][colindex] === null) {\n                arr[cardIndex][rowindex][colindex] = col\n                count[cardIndex].all = myCount[cardIndex].all + 1\n                count[cardIndex][rows[rowindex]] = myCount[cardIndex][rows[rowindex]] + 1\n\n                if (corners[cardIndex].includes(col)) {\n                    count[cardIndex].corner = myCount[cardIndex].corner + 1\n                }\n\n            } else {\n                arr[cardIndex][rowindex][colindex] = null\n                count[cardIndex].all = myCount[cardIndex].all - 1\n                count[cardIndex][rows[rowindex]] = myCount[cardIndex][rows[rowindex]] - 1\n\n                if (corners[cardIndex].includes(col)) {\n                    count[cardIndex].corner = myCount[cardIndex].corner - 1\n                }\n            }\n            setMyCard(arr)\n            setMyCount(count)\n            if (count[cardIndex].all == 15) {\n                setShowGIF(cardIndex + 1)\n                audio.play()\n            }\n        }\n    }\n\n    return (\n        <div style={{background: \"peru\"}}>\n            {id === \"\" && <div>\n                <input placeholder=\"insert you ticket id\" className='m-5 p-3' onChange={(e) => tempId = e.target.value} />\n                <Button onClick={() => setId(tempId)} className='m-5' variant=\"success\">Submit</Button>\n            </div>\n            }\n            {id && <h2>Ticket : {id}</h2>}\n            {selectedCard.map((card, cardindex) => <div style={{background: \"#fff\", border: \"1px solid\" }} className=\"d-sm-flex p-1 p-md-3 m-0 m-md-3\">\n                <div className=\"w-sm-100 col-sm-9 p-0\">\n                    {card._entries.map((row, rowindex) =>\n                        <div style={{ display: \"flex\", height: \"30%\" }}>\n                            {row.map((col, colindex) => <button\n                                style={{\n                                    // lexBasis: 0,\n                                    // flexGrow: 1,\n                                    // maxWidth: \"100%\",\n                                    width: \"15%\",\n                                    minWidth: \"30px\",\n                                    border: \"1px solid\",\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: \"20px\",\n                                    padding: \"2%\",\n                                    background: col ? (myCard[cardindex][rowindex][colindex] ? \"#6c757d\" : \"#fff\") : colors[cardindex],\n                                    cursor: col ? \"pointer\" : \"unset\",\n                                    textDecoration: myCard[cardindex][rowindex][colindex] ? \"line-through\" : \"none\",\n                                    textDecorationThickness: myCard[cardindex][rowindex][colindex] ? \"1px\" : \"none\"\n                                }}\n                                onClick={(e) => onClick(cardindex, rowindex, colindex, col)}>\n                                {col || \" \"}</button>)}\n                        </div>)\n                    }\n                </div>\n                {myCount[cardindex].all == 15 ?\n                    showGIF == cardindex + 1 && <img src={img} height=\"180px\" className=\"p-2\"></img> :\n                    <div style={{ textAlign: \"left\", marginLeft: \"10px\", fontSize: \"14px\", fontWeight: \"600\" }}>\n                        <div style={{ padding: \"3px\" }}>\n                            Early 5: {myCount[cardindex].all >= 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Top Line: {myCount[cardindex].top == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Middle Line: {myCount[cardindex].middle == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Bottom Line: {myCount[cardindex].bottom == 5 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Four Corners: {myCount[cardindex].corner == 4 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                        <div style={{ padding: \"3px\" }}>\n                            Full House 1: {myCount[cardindex].all == 15 ? <>&#x2705;</> : <>&#10060;</>}\n                        </div>\n                    </div>}\n            </div>)}\n            {id !== \"\" && players != 0 && (parseInt(id) > players || id <= 0) && <h1>Card Not Found</h1>}\n        </div>\n    );\n}\n\nexport default React.memo(PlayCard);\n","/home/avinash/Desktop/cardplay/src/firebase.js",[],"/home/avinash/Desktop/cardplay/src/components/VerifyCard.js",["64","65","66","67","68"],"import React, { useEffect, useState } from \"react\";\nimport { collection, getDocs } from \"firebase/firestore\"\nimport { fireStore } from \"../firebase\";\n\nconst wins = [\n    \"Early 5\",\n    \"Top Line\",\n    \"Middle Line\",\n    \"Bottom Line\",\n    \"Four Corners\",\n    \"Full House 1\",\n    \" Full House 2\"\n]\n\nconst constSets = [1, 2, 3, 4, 5, 6];\nconst colors = [\"red\", \"green\", \"blue\", \"purple\", \"orange\", \"yellow\"]\n\nfunction VerifyCard({ openDialog, setOpenDialog, list }) {\n    const [id, setId] = useState()\n    const [color, setColor] = useState(\"red\")\n    const ticketCollectionRef = collection(fireStore, \"tickets\")\n    const [onlineCards, setOnlineCards] = useState({})\n    const [selectedCard, setSelectedCard] = useState([])\n\n    const onCloseDialog = () => {\n        setSelectedCard([])\n        setOpenDialog(false)\n    }\n\n    useEffect(() => {\n        const getTickets = async () => {\n            let data = await getDocs(ticketCollectionRef)\n            data = data.docs[0].data()\n            setOnlineCards({ list: JSON.parse(data.list), sets: data.sets, players: data.players })\n        }\n        getTickets()\n    }, [])\n\n    useEffect(() => {\n        if (id && color) {\n            let b = parseInt(id - 1) * onlineCards.sets\n            let a = colors.indexOf(color)\n            setSelectedCard(onlineCards.list[a + b])\n        }\n    }, [id, color])\n\n    const changeColor = (e) => setColor(e.target.value)\n\n    return (\n        <dialog open={openDialog}>\n            <div>\n                <div>\n                    <input className=\"mr-3 p-1\" style={{ width: \"100px\" }} placeholder=\"card id\" onChange={(e) => setId(e.target.value)} type=\"number\" />\n                    <label className=\"mr-2\">select Color : </label>\n                    <select onChange={changeColor} className=\"px-2 py-1\" >\n                        {colors.map((c, index) => index < onlineCards.sets && <option value={c} style={{ background: c }}>{c}</option>)}\n                    </select>\n                </div>\n            </div>\n            <div className=\"p-2\">\n                {id !== \"\" && onlineCards.players != 0 && (parseInt(id) > onlineCards.players || id <= 0) ?\n                    <h3>Card Not Found</h3> :\n                    <>{selectedCard?._entries?.map((row, rowindex) =>\n                        <div style={{ display: \"flex\" }}>\n                            {row.map((col) => <button\n                                style={{\n                                    width: \"15%\",\n                                    minWidth: \"40px\",\n                                    border: \"1px solid\",\n                                    display: \"flex\",\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: \"20px\",\n                                    padding: \"2%\",\n                                    background: col ? list.includes(col) ? \"#6c757d\" : \"#fff\" : color,\n                                    cursor: col ? \"pointer\" : \"unset\",\n                                    textDecoration: list.includes(col) ? \"line-through\" : \"none\",\n                                    textDecorationThickness: list.includes(col) ? \"1px\" : \"none\"\n                                }}>\n                                {col || \" \"}</button>)}\n                        </div>)\n                    }</>\n                }\n            </div>\n            <div className=\"d-flex justify-content-end\">\n                <button type=\"button\" class=\"btn btn-outline-danger btn-sm\" onClick={onCloseDialog}>close</button>\n            </div>\n        </dialog>\n    );\n}\n\nexport default React.memo(VerifyCard);\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"77","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":20},{"ruleId":"73","severity":1,"message":"78","line":20,"column":10,"nodeType":"75","messageId":"76","endLine":20,"endColumn":15},{"ruleId":"73","severity":1,"message":"79","line":20,"column":17,"nodeType":"75","messageId":"76","endLine":20,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":115,"column":52,"nodeType":"82","messageId":"83","endLine":115,"endColumn":54},{"ruleId":"73","severity":1,"message":"79","line":18,"column":19,"nodeType":"75","messageId":"76","endLine":18,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":37,"column":8,"nodeType":"86","endLine":37,"endColumn":10,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":55,"column":21,"nodeType":"90","messageId":"91","endLine":55,"endColumn":23},{"ruleId":"88","severity":1,"message":"89","line":57,"column":38,"nodeType":"90","messageId":"91","endLine":57,"endColumn":40},{"ruleId":"80","severity":1,"message":"81","line":58,"column":25,"nodeType":"82","messageId":"83","endLine":58,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":61,"column":38,"nodeType":"90","messageId":"91","endLine":61,"endColumn":40},{"ruleId":"80","severity":1,"message":"81","line":62,"column":25,"nodeType":"82","messageId":"83","endLine":62,"endColumn":27},{"ruleId":"80","severity":1,"message":"81","line":86,"column":17,"nodeType":"82","messageId":"83","endLine":86,"endColumn":19},{"ruleId":"80","severity":1,"message":"92","line":109,"column":38,"nodeType":"82","messageId":"83","endLine":109,"endColumn":40},{"ruleId":"80","severity":1,"message":"92","line":151,"column":41,"nodeType":"82","messageId":"83","endLine":151,"endColumn":43},{"ruleId":"80","severity":1,"message":"92","line":152,"column":29,"nodeType":"82","messageId":"83","endLine":152,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":152,"column":49,"nodeType":"95","endLine":152,"endColumn":95},{"ruleId":"80","severity":1,"message":"92","line":158,"column":63,"nodeType":"82","messageId":"83","endLine":158,"endColumn":65},{"ruleId":"80","severity":1,"message":"92","line":161,"column":69,"nodeType":"82","messageId":"83","endLine":161,"endColumn":71},{"ruleId":"80","severity":1,"message":"92","line":164,"column":69,"nodeType":"82","messageId":"83","endLine":164,"endColumn":71},{"ruleId":"80","severity":1,"message":"92","line":167,"column":70,"nodeType":"82","messageId":"83","endLine":167,"endColumn":72},{"ruleId":"80","severity":1,"message":"92","line":170,"column":67,"nodeType":"82","messageId":"83","endLine":170,"endColumn":69},{"ruleId":"80","severity":1,"message":"81","line":174,"column":35,"nodeType":"82","messageId":"83","endLine":174,"endColumn":37},{"ruleId":"73","severity":1,"message":"96","line":5,"column":7,"nodeType":"75","messageId":"76","endLine":5,"endColumn":11},{"ruleId":"73","severity":1,"message":"97","line":15,"column":7,"nodeType":"75","messageId":"76","endLine":15,"endColumn":16},{"ruleId":"84","severity":1,"message":"85","line":37,"column":8,"nodeType":"86","endLine":37,"endColumn":10,"suggestions":"98"},{"ruleId":"84","severity":1,"message":"99","line":45,"column":8,"nodeType":"86","endLine":45,"endColumn":19,"suggestions":"100"},{"ruleId":"80","severity":1,"message":"81","line":61,"column":51,"nodeType":"82","messageId":"83","endLine":61,"endColumn":53},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'collection' is defined but never used.","'audio' is assigned a value but never used.","'setAudio' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ticketCollectionRef'. Either include it or remove the dependency array.","ArrayExpression",["103"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'wins' is assigned a value but never used.","'constSets' is assigned a value but never used.",["104"],"React Hook useEffect has missing dependencies: 'onlineCards.list' and 'onlineCards.sets'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedCard' needs the current value of 'onlineCards.list'.",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"106","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [ticketCollectionRef]",{"range":"111","text":"112"},{"range":"113","text":"112"},"Update the dependencies array to be: [id, color, onlineCards.sets, onlineCards.list]",{"range":"114","text":"115"},[1457,1459],"[ticketCollectionRef]",[1121,1123],[1343,1354],"[id, color, onlineCards.sets, onlineCards.list]"]